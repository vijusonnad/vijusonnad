# This workflow installs the latest version of OCI CLI and configures the OCI CLI configuration file
# with an API token for the Oracle Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, and `terraform plan` (speculative plan via Terraform Cloud). On successful pull request merge
# to the "development" branch, `terraform apply` will be executed.


name: 'Deploy objectstorage in OCI'

on:
  pull_request:
    types: [opened, edited, synchronize, closed]
    branches:
      - 'development'
    paths:
      - 'stack5/objectstorage/*'
env:

#### Enter Source Provider ###

# source provider
  PROVIDER_NAME: "dd_github_token"
  REGION: "us-ashburn-1"
  BRANCH_NAME: "feature-objectstorage"
  STACK_NAME: "dd_stack5_objectstorage"
  WORKING_DIRECTORY: "stack5/objectstorage"
  
  REPO_URL: "https://github.com/ebizon-cloud-llc/delta_dental.git"
  TF_VERSION: "1.0.x"

#####  permissions ######

permissions:
  contents: write

jobs:
  dd_stack5_objectstorage:
    # if: inputs.deploy_stacks  == 'all' ||  inputs.deploy_stacks  == 'stack1_compartments'
    #  if : github.event.pull_request.merged == true
     runs-on: ubuntu-latest
    #  environment: terraform-plan
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest

     steps:
      - name: checkout
        uses: actions/checkout@v3

#### Creating Config files ###


      - name: 'Writing config files'
        run: |
          mkdir ~/.oci
          echo "[DEFAULT]" >> ~/.oci/config
          echo "user=${{secrets.USER_OCID}}" >> ~/.oci/config
          echo "fingerprint=${{secrets.FINGERPRINT}}" >> ~/.oci/config
          echo "compartment_ocid=${{secrets.COMPARTMENT_OCID}}" >> ~/.oci/config
          echo "region=${{secrets.REGION}}" >> ~/.oci/config
          echo "tenancy=${{secrets.TENANCY_OCID}}" >> ~/.oci/config
          echo "key_file=~/.oci/key.pem" >> ~/.oci/config
          echo "${{secrets.PRIVATE_KEY_FILE}}" >> ~/.oci/key.pem
          echo "~/.oci/config file "
          cat ~/.oci/config
          echo " ~/.oci/key.pem file"
          cat ~/.oci/key.pem
          ls -lta ~/.oci
          ls -lta ~
          pwd
      - name: 'Install OCI CLI'
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          #exec -l $SHELL
          echo " Fixing file permissions and testing oci"
          /home/runner/bin/oci setup repair-file-permissions --file ~/.oci/config
          /home/runner/bin/oci setup repair-file-permissions --file ~/.oci/key.pem
          echo " oci os ns get"
          /home/runner/bin/oci os ns get 


 #### Check for provider ####    

      - name: 'Check for provider'
        run: |
          echo "SOURCE_PROVIDER_ID=$(/home/runner/bin/oci resource-manager configuration-source-provider list \
            --compartment-id ${{ secrets.COMPARTMENT_OCID }} | jq '.data.items[] | select(."display-name"==env.PROVIDER_NAME).id' -r)" >> $GITHUB_ENV
          if [ $? -ne 0 ]; then
            echo "No SOURCE_PROVIDER found with the name env.PROVIDER_NAME"
            exit 1
          fi
          echo ${{env.SOURCE_PROVIDER_ID}}

#### Check for existing stack stack5/objectstorage ####   

      - name: 'Check for existing stack objectstorage'
        run: |
          echo "STACK_ID=$(/home/runner/bin/oci resource-manager stack list --all --compartment-id ${{secrets.COMPARTMENT_OCID}} | jq '.data[] | select(."display-name"==env.STACK_NAME).id' -r)" >> $GITHUB_ENV

#### Check for update stack stack5/objectstorage #### 


      - name: 'Update Stack for objectstorage'
        if: ${{env.STACK_ID != ''}}
        run: |
          echo $STACK_ID
          /home/runner/bin/oci resource-manager stack update-from-git-provider \
            --config-source-configuration-source-provider-id $SOURCE_PROVIDER_ID \
            --stack-id $STACK_ID \
            --config-source-branch-name $BRANCH_NAME \
            --config-source-repository-url $REPO_URL \
            --config-source-working-directory $WORKING_DIRECTORY \
            --variables file://$WORKING_DIRECTORY/tfvars.json \
            --wait-for-state ACTIVE \
            --force
#### create stack name objectstorage####


      - name: 'Create Stack for objectstorage'
        if: ${{env.STACK_ID == ''}}
        run: |
          echo "STACK_ID=$(/home/runner/bin/oci resource-manager stack create-from-git-provider \
            --compartment-id ${{secrets.COMPARTMENT_OCID}} \
            --config-source-configuration-source-provider-id $SOURCE_PROVIDER_ID \
            --config-source-branch-name $BRANCH_NAME \
            --config-source-repository-url $REPO_URL \
            --display-name $STACK_NAME \
            --config-source-working-directory $WORKING_DIRECTORY \
            --terraform-version $TF_VERSION \
            --variables file://$WORKING_DIRECTORY/tfvars.json \
            --wait-for-state SUCCEEDED | jq '.data.id' -r)" >> $GITHUB_ENV
          if [ $? -ne 0 ]; then
          exit 1
          fi
###### Terraform Plan for the stack objectstorage######         


      - name: 'Terraform Plan for the stack objectstorage'
        if: ${{env.STACK_ID != ''}}
        run: |
          echo "PLAN_JOB_ID=$(/home/runner/bin/oci resource-manager job create-plan-job \
            --stack-id $STACK_ID | jq '.data.id' -r)" >> $GITHUB_ENV
      - name: 'Waiting for Terraform Plan to complete'
        if: ${{env.PLAN_JOB_ID != ''}}
        run: |
          while true
          do
            JOB_STATUS=$(/home/runner/bin/oci resource-manager job get --job-id ${{env.PLAN_JOB_ID}}  | jq '.data' | grep lifecycle-state | awk '{print $2}' | tr -d '"' | tr -d ',')
            if [ "$JOB_STATUS" == "SUCCEEDED" ]; then
              echo "Terraform Plan: $JOB_STATUS"
              break
            elif [ "$JOB_STATUS" == "FAILED" ]; then
              echo "Terraform Plan: $JOB_STATUS"
              break
            else
              echo "Terraform Plan: $JOB_STATUS"
              sleep 10
            fi
          done 


    #### Terraform plan output####   


      - name: "Terraform plan output to GitHUb"
        if : ${{env.PLAN_JOB_ID != ''}}
        run: |
          /home/runner/bin/oci resource-manager job get-job-logs-content \
            --job-id $PLAN_JOB_ID --output table > ~/tf_plan_output.log
      - name: "Display the terraform plan on console output"
        run: |
          JOB_STATUS=$(/home/runner/bin/oci resource-manager job get --job-id ${{env.PLAN_JOB_ID}}  | jq '.data' | grep lifecycle-state | awk '{print $2}' | tr -d '"' | tr -d ',')
          if [ "$JOB_STATUS" == "SUCCEEDED" ]; then
            echo "Terraform Plan: $JOB_STATUS"
            cat ~/tf_plan_output.log
          else
            echo "Terraform Plan: $JOB_STATUS"
            cat ~/tf_plan_output.log
            exit 1
          fi


    ####  Create a script ######  


      - name: "Create a script to validate tf plan"
        run: |
          echo '#!/bin/sh' > ~/validate_tfplan.sh
          echo 'plan=$(grep -c "No changes. Infrastructure is up-to-date\|No changes. Your infrastructure matches the configuration" ~/tf_plan_output.log)' >> ~/validate_tfplan.sh  
          echo 'if [ ${plan} -ne 0 ]' >> ~/validate_tfplan.sh
          echo 'then' >> ~/validate_tfplan.sh
          echo 'echo yes' >> ~/validate_tfplan.sh
          echo 'else' >> ~/validate_tfplan.sh
          echo 'echo no' >> ~/validate_tfplan.sh
          echo 'fi' >> ~/validate_tfplan.sh
          cat ~/validate_tfplan.sh
          chmod 755 ~/validate_tfplan.sh


    #####   Validate ######   

      - name: "Validate"
        run: echo "SKIP_TF_APPLY=$(sh ~/validate_tfplan.sh)" >> $GITHUB_ENV
      - name: "SKIP_APPLY from env variables is "
        run: echo "${{env.SKIP_TF_APPLY}}"
    #  - name: 'Manually validate the terraform plan and approve the apply action'
    #    if: ${{env.SKIP_TF_APPLY == 'no' }}
    #    uses: actions/manual-approval@v1
    #    with:
    #      secret: ${{ secrets.REPO_TOKEN }}
    #      approvers: Karthiga1700
    #      minimum-approvals: 1
    #      issue-title: "Stack Compartments: Deploying Terraform plan to apply"

    #### Terraform Apply for the stack objectstorage ####


      - name: 'Terraform Apply for the stack objectstorage'
        if: ${{env.PLAN_JOB_ID != '' && env.SKIP_TF_APPLY == 'no'  && github.event.pull_request.merged == true }}
        run: |
          echo "APPLY_JOB_ID=$(/home/runner/bin/oci resource-manager job create-apply-job \
            --execution-plan-strategy FROM_PLAN_JOB_ID \
            --execution-plan-job-id $PLAN_JOB_ID \
            --stack-id $STACK_ID \
             | jq '.data.id' -r)" >> $GITHUB_ENV
      - name: 'Wait for Terraform Apply to complete'
        if: ${{env.APPLY_JOB_ID != '' && github.event.pull_request.merged == true}}
        run: |
          while true
          do
            JOB_STATUS=$(/home/runner/bin/oci resource-manager job get --job-id ${{env.APPLY_JOB_ID}}  | jq '.data' | grep lifecycle-state | awk '{print $2}' | tr -d '"' | tr -d ',')
            if [ "$JOB_STATUS" == "SUCCEEDED" ]; then
              echo "Terraform Apply: $JOB_STATUS"
              break
            elif [ "$JOB_STATUS" == "FAILED" ]; then
              echo "Terraform Apply: $JOB_STATUS"
              break
              exit 1
            else
              echo "Terraform Apply: $JOB_STATUS"
              sleep 30
            fi
          done

 ##### terraform apply output ######     


      - name: 'Saving the terraform apply output to GitHub'
        if : ${{env.APPLY_JOB_ID != '' && github.event.pull_request.merged == true}}
        run: |
          /home/runner/bin/oci resource-manager job get-job-logs-content \
            --job-id $APPLY_JOB_ID --output table > ~/tf_apply_output.log
      - name: "Display the terraform apply output on console"
        if : ${{env.APPLY_JOB_ID != '' && github.event.pull_request.merged == true}}
        run: |
          JOB_STATUS=$(/home/runner/bin/oci resource-manager job get --job-id ${{env.APPLY_JOB_ID}}  | jq '.data' | grep lifecycle-state | awk '{print $2}' | tr -d '"' | tr -d ',')
          if [ "$JOB_STATUS" == "SUCCEEDED" ]; then
            echo "Terraform Apply: $JOB_STATUS"
            cat ~/tf_apply_output.log
            exit 0
          elif [ "$JOB_STATUS" == "FAILED" ]; then
            echo "Terraform Apply: $JOB_STATUS"
            cat ~/tf_apply_output.log
            exit 1
          else
            echo "Terraform Apply: $JOB_STATUS"
            cat ~/tf_apply_output.log
          fi
